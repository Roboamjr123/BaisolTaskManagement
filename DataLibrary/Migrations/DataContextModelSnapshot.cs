// <auto-generated />
using System;
using DataLibrary.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataLibrary.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.7.24405.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataLibrary.Models.Projects", b =>
                {
                    b.Property<int>("Project_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Project_Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Project_Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Project_Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DataLibrary.Models.SubDetails", b =>
                {
                    b.Property<int>("SubD_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubD_Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("SubD_Name")
                        .HasColumnType("text");

                    b.Property<int>("SubT_Id")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SubD_Id");

                    b.HasIndex("SubT_Id");

                    b.ToTable("SubDetails");
                });

            modelBuilder.Entity("DataLibrary.Models.SubTasks", b =>
                {
                    b.Property<int>("SubT_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubT_Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PlannedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PlannedStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubT_Name")
                        .HasColumnType("text");

                    b.Property<int>("Task_Id")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SubT_Id");

                    b.HasIndex("Task_Id");

                    b.ToTable("SubTasks");
                });

            modelBuilder.Entity("DataLibrary.Models.Tasks", b =>
                {
                    b.Property<int>("Task_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Task_Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PlannedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PlannedStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Project_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Task_Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Task_Id");

                    b.HasIndex("Project_Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("DataLibrary.Models.SubDetails", b =>
                {
                    b.HasOne("DataLibrary.Models.SubTasks", "SubTask")
                        .WithMany("SubDetail")
                        .HasForeignKey("SubT_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubTask");
                });

            modelBuilder.Entity("DataLibrary.Models.SubTasks", b =>
                {
                    b.HasOne("DataLibrary.Models.Tasks", "Task")
                        .WithMany("SubTask")
                        .HasForeignKey("Task_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DataLibrary.Models.Tasks", b =>
                {
                    b.HasOne("DataLibrary.Models.Projects", "Project")
                        .WithMany("Task")
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DataLibrary.Models.Projects", b =>
                {
                    b.Navigation("Task");
                });

            modelBuilder.Entity("DataLibrary.Models.SubTasks", b =>
                {
                    b.Navigation("SubDetail");
                });

            modelBuilder.Entity("DataLibrary.Models.Tasks", b =>
                {
                    b.Navigation("SubTask");
                });
#pragma warning restore 612, 618
        }
    }
}
